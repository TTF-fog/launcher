name: Build launcher and bump version
on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  bump-version-number:

    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: check commit type
        shell: bash
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"release:"* ]]; then
              echo "Continuing to build as release"
          else
              echo "Not a release commit, exiting (note: this may take 5-10 seconds)"
              gh run cancel ${{ github.run_id }}
              gh run watch ${{ github.run_id }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
      - name: setup git
        run: |
          git config --global user.name "Github Actions"
          git config --global user.email "actions@github.com"
      - name: update file version
        run: |
          #parsed string
          
          export old_version=$(cat WpfApp5/AssemblyInfo.cs|sed -n 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
          export new_version=$(cat WpfApp5/AssemblyInfo.cs | tail -n 1 | sed -n 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p' |  awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}')
          echo $old_version
          echo $new_version
          sed -i "s/$old_version/$new_version/g" WpfApp5/AssemblyInfo.cs 

      - name: push to origin
        run: |
          git add WpfApp5/AssemblyInfo.cs
          git commit -m "Update file version"
          git push origin main
      - name: checkout cdn
        uses: actions/checkout@v4
        with:
          repository: 'ttf-fog/newcdn'
          ref: 'main'
          token: ${{secrets.ACTIONS_GITHUB_TOKEN}}
      - name: setup git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@example.com"
      - name: upload to newcdn

        run: |
          echo ${{ env.version }}
          export new_version="${{ env.version }}"
          
          contents="$(jq '.version = "'$new_version'"' launcher/launcherVersion.txt)" && \
          echo -E "${contents}" > launcher/launcherVersion.txt
          cat launcher/launcherVersion.txt
          git add launcher/launcherVersion.txt
          git commit -m "Bump launcher version"
          git push origin main

  deploy:
    needs: bump-version-number
    runs-on: windows-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v4


      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: WpfApp5/global.json

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Build
        run: |
          cd WpfApp5
          ewgfge
          msbuild -t:Restore Flarial.Launcher.csproj
          msbuild /p:Configuration=Release /m Flarial.Launcher.csproj
          cd D:\a\launcher\launcher\WpfApp5\bin\Release

      - name: Revert if failed
        if: failure()
        run: |
          git reset --hard
          export hash=git log --grep="release" --oneline | head -n 1 | cut -d ' ' -f1
          git revert $hash -m "revert version bump due to build failure"
          git push origin main
        shell: bash
      - name: Checkout cdn repository
        uses: actions/checkout@v4
        with:
          repository: 'ttf-fog/newcdn'
          ref: 'main'
          path: 'cdn'
          token: ${{secrets.ACTIONS_GITHUB_TOKEN}}

      - name: Setup git config
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@example.com"

      - name: Upload to newcdn
        run: |
          cd cdn
          cp D:/a/launcher/launcher/WpfApp5/bin/Release/net481/Flarial.Launcher.exe ./launcher/Flarial.Launcher.exe
          git add Launcher/Flarial.Launcher.exe
          git commit -a -m "Update launcher"
          git push origin main
